
Tailwind CSS provides a comprehensive set of utility classes for building grid layouts based on the native CSS Grid module. This allows for flexible and responsive designs without writing custom CSS.
Key Tailwind Grid Utilities:

    grid: Initializes a grid container.
    grid-cols-{n}: Defines the number of columns in the grid. For example, grid-cols-4 creates a 4-column grid. You can also use custom values like grid-cols-[1fr_2fr_1fr].
    grid-rows-{n}: Defines the number of rows in the grid. Similar to columns, you can use custom values.
    gap-{size}: Controls the spacing between grid items (both rows and columns). This can be specified for all gaps or individually for gap-x-{size} and gap-y-{size}.
    col-span-{n}: Makes a grid item span a specific number of columns.
    row-span-{n}: Makes a grid item span a specific number of rows.
    col-start-{n} / col-end-{n}: Positions a grid item to start or end at a specific grid line (CSS grid lines are 1-indexed).
    row-start-{n} / row-end-{n}: Positions a grid item to start or end at a specific row line.
    auto-cols-auto / auto-rows-auto: Controls how implicitly created grid tracks are sized.
    justify-items-{alignment} / align-items-{alignment}: Controls the alignment of grid items within their cells along the inline and block axes, respectively.
    justify-self-{alignment} / align-self-{alignment}: Controls the alignment of an individual grid item within its cell.
    place-items-{alignment} / place-content-{alignment} / place-self-{alignment}: Shorthand utilities for setting both justify-* and align-* properties.

Example:
Code

<div class="grid grid-cols-3 gap-4">
  <div class="col-span-2 bg-blue-200 p-4">Item 1 (spans 2 columns)</div>
  <div class="bg-green-200 p-4">Item 2</div>
  <div class="bg-red-200 p-4">Item 3</div>
  <div class="bg-yellow-200 p-4">Item 4</div>
</div>

This example creates a 3-column grid with a gap of 16px (gap-4). The first item spans two columns.
